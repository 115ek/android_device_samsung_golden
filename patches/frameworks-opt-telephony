diff --git a/src/java/com/android/internal/telephony/Operators.java b/src/java/com/android/internal/telephony/Operators.java
new file mode 100644
index 0000000..aa41993
--- /dev/null
+++ b/src/java/com/android/internal/telephony/Operators.java
@@ -0,0 +1,139 @@
+/*
+ * Copyright (C) 2013-2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.telephony;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
+
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+
+import android.os.Environment;
+import android.telephony.Rlog;
+import android.util.Xml;
+
+import com.android.internal.util.XmlUtils;
+
+public class Operators {
+    // Initialize list of Operator codes
+    // This will be taken care of when garbage collection starts.
+    private HashMap<String, String>  initList() {
+        HashMap<String, String> init = new HashMap<String, String>();
+        // Taken from spnOveride.java
+        FileReader spnReader;
+        final File spnFile = new File(Environment.getRootDirectory(), "etc/selective-spn-conf.xml");
+
+        try {
+            spnReader = new FileReader(spnFile);
+        } catch (FileNotFoundException e) {
+            Rlog.w("Operatorcheck", "Can not open " +
+                   Environment.getRootDirectory() + "/etc/selective-spn-conf.xml");
+            return init;
+        }
+
+        try {
+            XmlPullParser parser = Xml.newPullParser();
+            parser.setInput(spnReader);
+
+            XmlUtils.beginDocument(parser, "spnOverrides");
+
+            while (true) {
+                XmlUtils.nextElement(parser);
+
+                String name = parser.getName();
+                if (!"spnOverride".equals(name)) {
+                    break;
+                }
+
+                String numeric = parser.getAttributeValue(null, "numeric");
+                String data    = parser.getAttributeValue(null, "spn");
+
+                init.put(numeric, data);
+            }
+        } catch (XmlPullParserException e) {
+            Rlog.w("Operatorcheck", "Exception in spn-conf parser " + e);
+        } catch (IOException e) {
+            Rlog.w("Operatorcheck", "Exception in spn-conf parser " + e);
+        }
+        return init;
+    }
+
+    // This will stay persistant in memory when called
+    private static String stored = null;
+    private static String storedOperators = null;
+
+    public static String operatorReplace(String response) {
+        // Sanity checking if the value is actually not equal to the range apn Numerics
+        // If it is null, check your ril class.
+        if(response == null || (5 != response.length() && response.length() != 6)) {
+            return response;
+        }
+        // This will check if the stored value is equal to other.
+        // This uses a technique called last known of good value along with sanity checking.
+        if(storedOperators != null && stored != null && stored.equals(response)) {
+            return storedOperators;
+        }
+        stored = response;
+        try {
+            // This will find out if it a number then it will catch it based on invalid chars.
+            Integer.parseInt(response);
+        }  catch(NumberFormatException E) {
+            // Not a number, pass it along to stored operator until the next round.
+            storedOperators = response;
+            return storedOperators;
+        }
+        // This code will be taking care of when garbage collection start
+        Operators init = new Operators();
+        Map<String, String> operators = init.initList();
+        storedOperators = operators.containsKey(response) ? operators.get(response) : response;
+        return storedOperators;
+    }
+
+    // This will not stay persistant in memory, this will be taken care of in garbage collection
+    // routine.
+    private Map<String, String> unOptOperators = null;
+    // Unoptimized version of operatorReplace for responseOperatorInfos this will provide a little
+    // more flexiblilty in a loop like situation.
+    // Same numbers of checks as before. This is for the search network functionality
+    public String unOptimizedOperatorReplace(String response) {
+        // Sanity checking if the value is actually not equal to the range apn numerics.
+        // if it is null, check your ril class.
+        if(response == null ||
+           (5 != response.length() && response.length() != 6)) {
+            return response;
+        }
+
+        try {
+            // This will find out if it a number then it will catch it based on invalid chars.
+            Integer.parseInt(response);
+        }  catch(NumberFormatException E) {
+            // An illegal char is found i.e a word
+            return response;
+        }
+
+        if (unOptOperators == null) {
+            unOptOperators = initList();
+        }
+
+        return unOptOperators.containsKey(response) ? unOptOperators.get(response) : response;
+    }
+}
diff --git a/src/java/com/android/internal/telephony/RIL.java b/src/java/com/android/internal/telephony/RIL.java
index 537107e..fea8572 100644
--- a/src/java/com/android/internal/telephony/RIL.java
+++ b/src/java/com/android/internal/telephony/RIL.java
@@ -3600,9 +3600,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
 
                 // Initial conditions
                 setRadioPower(false, null);
-                if (needsOldRilFeature("setPrefNwTypeOnUnsolConnected")) {
-                    setPreferredNetworkType(mPreferredNetworkType, null);
-                }
+                setPreferredNetworkType(mPreferredNetworkType, null);
                 setCdmaSubscriptionSource(mCdmaSubscription, null);
                 setCellInfoListRate(Integer.MAX_VALUE, null);
                 notifyRegistrantsRilConnectionChanged(((int[])ret)[0]);
diff --git a/src/java/com/android/internal/telephony/dataconnection/DataCallResponse.java b/src/java/com/android/internal/telephony/dataconnection/DataCallResponse.java
index a268221..a8dd415 100644
--- a/src/java/com/android/internal/telephony/dataconnection/DataCallResponse.java
+++ b/src/java/com/android/internal/telephony/dataconnection/DataCallResponse.java
@@ -167,6 +167,8 @@ public class DataCallResponse {
                             }
 
                             linkProperties.addLinkAddress(la);
+                            // PPP: Use client ip address as default gateway
+                            linkProperties.addRoute(new RouteInfo(ia));
                         }
                     }
                 } else {
@@ -209,28 +211,6 @@ public class DataCallResponse {
                     throw new UnknownHostException("Empty dns response and no system default dns");
                 }
 
-                // set gateways
-                if ((gateways == null) || (gateways.length == 0)) {
-                    String sysGateways = SystemProperties.get(propertyPrefix + "gw");
-                    if (sysGateways != null) {
-                        gateways = sysGateways.split(" ");
-                    } else {
-                        gateways = new String[0];
-                    }
-                }
-                for (String addr : gateways) {
-                    addr = addr.trim();
-                    if (addr.isEmpty()) continue;
-                    InetAddress ia;
-                    try {
-                        ia = NetworkUtils.numericToInetAddress(addr);
-                    } catch (IllegalArgumentException e) {
-                        throw new UnknownHostException("Non-numeric gateway addr=" + addr);
-                    }
-                    // Allow 0.0.0.0 or :: as a gateway; this indicates a point-to-point interface.
-                    linkProperties.addRoute(new RouteInfo(ia));
-                }
-
                 // set interface MTU
                 // this may clobber the setting read from the APN db, but that's ok
                 linkProperties.setMtu(mtu);

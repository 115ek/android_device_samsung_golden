From 67a99d939e8a6664b1b2942ddc43cedd1e080f03 Mon Sep 17 00:00:00 2001
From: Meticulus <theonejohnnyd@gmail.com>
Date: Mon, 18 Jul 2016 08:44:54 -0500
Subject: [PATCH] Reenable-support-for-non-PIE-executables

Change-Id: I1eefb1e29a0cf72f5d3c8a2799e03e20ea9b785d
---
 linker/linker.cpp | 116 ++++++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 91 insertions(+), 25 deletions(-)

diff --git a/linker/linker.cpp b/linker/linker.cpp
index 364ecd5..678cc12 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -2176,18 +2176,53 @@ bool soinfo::relocate(const VersionTracker& version_tracker, ElfRelIteratorT&& r
         }
         break;
 
-      case R_AARCH64_COPY:
-        /*
-         * ET_EXEC is not supported so this should not happen.
-         *
-         * http://infocenter.arm.com/help/topic/com.arm.doc.ihi0056b/IHI0056B_aaelf64.pdf
-         *
-         * Section 4.6.11 "Dynamic relocations"
-         * R_AARCH64_COPY may only appear in executable objects where e_type is
-         * set to ET_EXEC.
-         */
-        DL_ERR("%s R_AARCH64_COPY relocations are not supported", get_realpath());
-        return false;
+      case R_AARCH64_COPY: 
+     if ((flags & FLAG_EXE) == 0) {
+         /*
+           * http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044d/IHI0044D_aaelf.pdf
+           *
+           * Section 4.7.1.10 "Dynamic relocations"
+           * R_AARCH64_COPY may only appear in executable objects where e_type is
+           * set to ET_EXEC.
+           *
+           * FLAG_EXE is set for both ET_DYN and ET_EXEC executables.
+           * We should explicitly disallow ET_DYN executables from having
+           * R_AARCH64_COPY relocations.
+           */
+         DL_ERR("%s R_AARCH64_COPY relocations only supported for ET_EXEC", name);
+         return false;
+     }
+     count_relocation(kRelocCopy);
+     MARK(rela->r_offset);
+     TRACE_TYPE(RELO, "RELO COPY %16llx <- %lld @ %16llx %s\n",
+                reloc,
+                s->st_size,
+                (sym_addr + rela->r_addend),
+                sym_name);
+     if (reloc == (sym_addr + rela->r_addend)) {
+         ElfW(Sym)* src = soinfo_do_lookup(NULL, sym_name, &lsi);
+
+         if (src == NULL) {
+             DL_ERR("%s R_AARCH64_COPY relocation source cannot be resolved", name);
+             return false;
+         }
+         if (lsi->has_DT_SYMBOLIC) {
+             DL_ERR("%s invalid R_AARCH64_COPY relocation against DT_SYMBOLIC shared "
+                    "library %s (built with -Bsymbolic?)", name, lsi->name);
+             return false;
+         }
+         if (s->st_size < src->st_size) {
+             DL_ERR("%s R_AARCH64_COPY relocation size mismatch (%lld < %lld)",
+                    name, s->st_size, src->st_size);
+             return false;
+         }
+         memcpy(reinterpret_cast<void*>(reloc),
+                reinterpret_cast<void*>(src->st_value + lsi->load_bias), src->st_size);
+     } else {
+         DL_ERR("%s R_AARCH64_COPY relocation target cannot be resolved", name);
+         return false;
+     }
+     break; 
       case R_AARCH64_TLS_TPREL64:
         TRACE_TYPE(RELO, "RELO TLS_TPREL64 *** %16llx <- %16llx - %16llx\n",
                    reloc, (sym_addr + addend), rel->r_offset);
@@ -2234,17 +2269,48 @@ bool soinfo::relocate(const VersionTracker& version_tracker, ElfRelIteratorT&& r
         *reinterpret_cast<ElfW(Addr)*>(reloc) += sym_addr - rel->r_offset;
         break;
       case R_ARM_COPY:
-        /*
-         * ET_EXEC is not supported so this should not happen.
-         *
-         * http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044d/IHI0044D_aaelf.pdf
-         *
-         * Section 4.6.1.10 "Dynamic relocations"
-         * R_ARM_COPY may only appear in executable objects where e_type is
-         * set to ET_EXEC.
-         */
-        DL_ERR("%s R_ARM_COPY relocations are not supported", get_realpath());
-        return false;
+     if ((flags & FLAG_EXE) == 0) {
+             /*
+              * http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044d/IHI0044D_aaelf.pdf
+              *
+              * Section 4.7.1.10 "Dynamic relocations"
+              * R_ARM_COPY may only appear in executable objects where e_type is
+              * set to ET_EXEC.
+              *
+              * TODO: FLAG_EXE is set for both ET_DYN and ET_EXEC executables.
+              * We should explicitly disallow ET_DYN executables from having
+              * R_ARM_COPY relocations.
+              */
+             DL_ERR("%s R_ARM_COPY relocations only supported for ET_EXEC", name);
+             return false;
+         }
+         count_relocation(kRelocCopy);
+         MARK(rel->r_offset);
+         TRACE_TYPE(RELO, "RELO %08x <- %d @ %08x %s", reloc, s->st_size, sym_addr, sym_name);
+         if (reloc == sym_addr) {
+             ElfW(Sym)* src = soinfo_do_lookup(NULL, sym_name, &lsi);
+
+             if (src == NULL) {
+                 DL_ERR("%s R_ARM_COPY relocation source cannot be resolved", name);
+                 return false;
+             }
+             if (lsi->has_DT_SYMBOLIC) {
+                 DL_ERR("%s invalid R_ARM_COPY relocation against DT_SYMBOLIC shared "
+                        "library %s (built with -Bsymbolic?)", name, lsi->name);
+                 return false;
+             }
+             if (s->st_size < src->st_size) {
+                 DL_ERR("%s R_ARM_COPY relocation size mismatch (%d < %d)",
+                        name, s->st_size, src->st_size);
+                 return false;
+             }
+             memcpy(reinterpret_cast<void*>(reloc),
+                    reinterpret_cast<void*>(src->st_value + lsi->load_bias), src->st_size);
+         } else {
+             DL_ERR("%s R_ARM_COPY relocation target cannot be resolved", name);
+             return false;
+         }
+         break;
 #elif defined(__i386__)
       case R_386_32:
         count_relocation(kRelocRelative);
@@ -3276,13 +3342,13 @@ static ElfW(Addr) __linker_init_post_relocation(KernelArgumentBlock& args, ElfW(
     }
   }
   si->dynamic = nullptr;
-
+/*
   ElfW(Ehdr)* elf_hdr = reinterpret_cast<ElfW(Ehdr)*>(si->base);
   if (elf_hdr->e_type != ET_DYN) {
     __libc_format_fd(2, "error: only position independent executables (PIE) are supported.\n");
     exit(EXIT_FAILURE);
   }
-
+*/
   // Use LD_LIBRARY_PATH and LD_PRELOAD (but only if we aren't setuid/setgid).
   parse_LD_LIBRARY_PATH(ldpath_env);
   parse_LD_PRELOAD(ldpreload_env);
-- 
1.9.1


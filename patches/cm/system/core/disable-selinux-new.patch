From d5aadc77084e70f352b773095b395ab12b5ff47c Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 13:53:13 +0700
Subject: [PATCH 08/29] system-core_W4-sad-selinux-2002.patch

Change-Id: I16ad8d2bdc018b06a8e412a3f3e1e9c3de2e127d
---
 init/service.cpp | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/init/service.cpp b/init/service.cpp
index 76e0bc8..43220d0 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -371,12 +371,6 @@ bool Service::Start() {
             scon = ret_scon;
             free(ret_scon);
         }
-        if (rc == 0 && scon == mycon) {
-            ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
-            free(mycon);
-            free(fcon);
-            return false;
-        }
         free(mycon);
         free(fcon);
         if (rc < 0) {
-- 
2.9.3
From 002f168bcf4693cea3ef27c9c6b9ba33befad9ba Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 14:01:38 +0700
Subject: [PATCH 22/29] Revert "restorecon /property_contexts"

This reverts commit e36a85cdcc93a84a6869fc8fc3fc82e3639d4398.

Change-Id: I4c6f97e28644a025ee1339dfb43ece41d99373d3
---
 init/init.cpp | 1 -
 1 file changed, 1 deletion(-)

diff --git a/init/init.cpp b/init/init.cpp
index 079c314..68308ed 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -643,7 +643,6 @@ int main(int argc, char** argv) {
     restorecon("/dev");
     restorecon("/dev/socket");
     restorecon("/dev/__properties__");
-    restorecon("/property_contexts");
     restorecon_recursive("/sys");
 
     epoll_fd = epoll_create1(EPOLL_CLOEXEC);
-- 
2.9.3
From 387474f71a888fd487e15c626f4a2b20b023a09a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 14:04:30 +0700
Subject: [PATCH 23/29] hipepid

Change-Id: I19a99b45fabee100b4a6a18bfa295081cbb67830
---
 init/init.cpp | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/init/init.cpp b/init/init.cpp
index 68308ed..a738584 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -587,8 +587,7 @@ int main(int argc, char** argv) {
         mkdir("/dev/pts", 0755);
         mkdir("/dev/socket", 0755);
         mount("devpts", "/dev/pts", "devpts", 0, NULL);
-        #define MAKE_STR(x) __STRING(x)
-        mount("proc", "/proc", "proc", 0, "hidepid=2,gid=" MAKE_STR(AID_READPROC));
+        mount("proc", "/proc", "proc", 0, NULL);
         mount("sysfs", "/sys", "sysfs", 0, NULL);
     }
 
-- 
2.9.3
From c875a81b73007ac2b2142a00824166b27bc72f59 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 14:31:57 +0700
Subject: [PATCH 24/29] Revert "ueventd: relabel block devices nodes when
 processing subsequent add events"

This reverts commit 721c9ce4a55c13716f263dc7a9cbda92b349b4b7.

Change-Id: I8c362d68f33f9cd4236c80d773d3c5f38f935523
---
 init/devices.cpp | 21 ++++++---------------
 1 file changed, 6 insertions(+), 15 deletions(-)

diff --git a/init/devices.cpp b/init/devices.cpp
index 29397b1..98cbae7 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -245,11 +245,7 @@ static void make_device(const char *path,
 
     mode = get_device_perm(path, links, &uid, &gid) | (block ? S_IFBLK : S_IFCHR);
 
-    if (selabel_lookup_best_match(sehandle, &secontext, path, links, mode)) {
-        ERROR("Device '%s' not created; cannot find SELinux label (%s)\n",
-                path, strerror(errno));
-        return;
-    }
+    selabel_lookup_best_match(sehandle, &secontext, path, links, mode);
     setfscreatecon(secontext);
 
     dev = makedev(major, minor);
@@ -259,19 +255,14 @@ static void make_device(const char *path,
      * racy. Fixing the gid race at least fixed the issue with system_server
      * opening dynamic input devices under the AID_INPUT gid. */
     setegid(gid);
-    /* If the node already exists update its SELinux label to handle cases when
-     * it was created with the wrong context during coldboot procedure. */
-    if (mknod(path, mode, dev) && (errno == EEXIST)) {
-        if (lsetfilecon(path, secontext)) {
-            ERROR("Cannot set '%s' SELinux label on '%s' device (%s)\n",
-                    secontext, path, strerror(errno));
-        }
-    }
+    mknod(path, mode, dev);
     chown(path, uid, -1);
     setegid(AID_ROOT);
 
-    freecon(secontext);
-    setfscreatecon(NULL);
+    if (secontext) {
+        freecon(secontext);
+        setfscreatecon(NULL);
+    }
 }
 
 static void add_platform_device(const char *path)
-- 
2.9.3
From 6a6f523c55d5b513eee7c873a59e18479845c3f5 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 14:43:08 +0700
Subject: [PATCH 25/29] Revert "Remove calls to is_selinux_enabled()"

This reverts commit 4d87095ebfefdb9e641492462f0a0e21d5b96ecf.

Change-Id: I9a08aeda8b4a55a1a83437727b6a371cfaa963aa
---
 adb/daemon/main.cpp       |  7 ++---
 debuggerd/debuggerd.cpp   |  8 ++++--
 init/devices.cpp          | 15 ++++++----
 init/property_service.cpp |  3 ++
 init/service.cpp          | 70 ++++++++++++++++++++++++-----------------------
 5 files changed, 58 insertions(+), 45 deletions(-)

diff --git a/adb/daemon/main.cpp b/adb/daemon/main.cpp
index 4721e2f..8d00527 100644
--- a/adb/daemon/main.cpp
+++ b/adb/daemon/main.cpp
@@ -142,10 +142,9 @@ static void drop_privileges(int server_port) {
     } else {
         // minijail_enter() will abort if any priv-dropping step fails.
         minijail_enter(jail.get());
-
-        if (root_seclabel != nullptr) {
-            if (selinux_android_setcon(root_seclabel) < 0) {
-                LOG(FATAL) << "Could not set SELinux context";
+        if ((root_seclabel != nullptr) && (is_selinux_enabled() > 0)) {
+            if (setcon(root_seclabel) < 0) {
+                LOG(FATAL) << "Could not set selinux context";
             }
         }
         std::string error;
diff --git a/debuggerd/debuggerd.cpp b/debuggerd/debuggerd.cpp
index 6189a76..d007822 100644
--- a/debuggerd/debuggerd.cpp
+++ b/debuggerd/debuggerd.cpp
@@ -128,6 +128,8 @@ static int get_process_info(pid_t tid, pid_t* out_pid, uid_t* out_uid, uid_t* ou
   return fields == 7 ? 0 : -1;
 }
 
+static int selinux_enabled;
+
 /*
  * Corresponds with debugger_action_t enum type in
  * include/cutils/debugger.h.
@@ -158,6 +160,9 @@ static bool selinux_action_allowed(int s, debugger_request_t* request)
   const char *perm;
   bool allowed = false;
 
+  if (selinux_enabled <= 0)
+    return true;
+
   if (request->action <= 0 || request->action >= (sizeof(debuggerd_perms)/sizeof(debuggerd_perms[0]))) {
     ALOGE("SELinux:  No permission defined for debugger action %d", request->action);
     return false;
@@ -922,10 +927,9 @@ static void usage() {
 int main(int argc, char** argv) {
   union selinux_callback cb;
   if (argc == 1) {
+    selinux_enabled = is_selinux_enabled();
     cb.func_audit = audit_callback;
     selinux_set_callback(SELINUX_CB_AUDIT, cb);
-    cb.func_log = selinux_log_callback;
-    selinux_set_callback(SELINUX_CB_LOG, cb);
     return do_server();
   }
 
diff --git a/init/devices.cpp b/init/devices.cpp
index 98cbae7..10019b4 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -245,8 +245,10 @@ static void make_device(const char *path,
 
     mode = get_device_perm(path, links, &uid, &gid) | (block ? S_IFBLK : S_IFCHR);
 
-    selabel_lookup_best_match(sehandle, &secontext, path, links, mode);
-    setfscreatecon(secontext);
+    if (sehandle) {
+        selabel_lookup_best_match(sehandle, &secontext, path, links, mode);
+        setfscreatecon(secontext);
+    }
 
     dev = makedev(major, minor);
     /* Temporarily change egid to avoid race condition setting the gid of the
@@ -1019,7 +1021,7 @@ void handle_device_fd()
         struct uevent uevent;
         parse_event(msg, &uevent);
 
-        if (selinux_status_updated() > 0) {
+        if (sehandle && selinux_status_updated() > 0) {
             struct selabel_handle *sehandle2;
             sehandle2 = selinux_android_file_context_handle();
             if (sehandle2) {
@@ -1086,8 +1088,11 @@ static void coldboot(const char *path)
 }
 
 void device_init() {
-    sehandle = selinux_android_file_context_handle();
-    selinux_status_open(true);
+    sehandle = NULL;
+    if (is_selinux_enabled() > 0) {
+        sehandle = selinux_android_file_context_handle();
+        selinux_status_open(true);
+    }
 
     /* is 256K enough? udev uses 16MB! */
     device_fd = uevent_open_socket(256*1024, true);
diff --git a/init/property_service.cpp b/init/property_service.cpp
index 8644329..89260f6 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -73,6 +73,9 @@ void property_init() {
 
 static int check_mac_perms(const char *name, char *sctx, struct ucred *cr)
 {
+    if (is_selinux_enabled() <= 0)
+        return 1;
+
     char *tctx = NULL;
     int result = 0;
     property_audit_data audit_data;
diff --git a/init/service.cpp b/init/service.cpp
index 0cb5b6f..18ac14b 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -357,40 +357,42 @@ bool Service::Start() {
         return false;
     }
 
-    std::string scon;
-    if (!seclabel_.empty()) {
-        scon = seclabel_;
-    } else {
-        char* mycon = nullptr;
-        char* fcon = nullptr;
-
-        INFO("computing context for service '%s'\n", args_[0].c_str());
-        int rc = getcon(&mycon);
-        if (rc < 0) {
-            ERROR("could not get context while starting '%s'\n", name_.c_str());
-            return false;
-        }
-
-        rc = getfilecon(args_[0].c_str(), &fcon);
-        if (rc < 0) {
-            ERROR("could not get context while starting '%s'\n", name_.c_str());
-            free(mycon);
-            return false;
-        }
-
-        char* ret_scon = nullptr;
-        rc = security_compute_create(mycon, fcon, string_to_security_class("process"),
+    if (is_selinux_enabled() > 0) {
+	    std::string scon;
+	    if (!seclabel_.empty()) {
+	        scon = seclabel_;
+	    } else {
+	        char* mycon = nullptr;
+	        char* fcon = nullptr;
+
+	        INFO("computing context for service '%s'\n", args_[0].c_str());
+	        int rc = getcon(&mycon);
+	        if (rc < 0) {
+	            ERROR("could not get context while starting '%s'\n", name_.c_str());
+	            return false;
+	        }
+
+	        rc = getfilecon(args_[0].c_str(), &fcon);
+	        if (rc < 0) {
+	            ERROR("could not get context while starting '%s'\n", name_.c_str());
+	            free(mycon);
+	            return false;
+	        }
+
+ 	       char* ret_scon = nullptr;
+        	rc = security_compute_create(mycon, fcon, string_to_security_class("process"),
                                      &ret_scon);
-        if (rc == 0) {
-            scon = ret_scon;
-            free(ret_scon);
-        }
-        free(mycon);
-        free(fcon);
-        if (rc < 0) {
-            ERROR("could not get context while starting '%s'\n", name_.c_str());
-            return false;
-        }
+        	if (rc == 0) {
+        	    scon = ret_scon;
+        	    free(ret_scon);
+        	}
+        	free(mycon);
+        	free(fcon);
+        	if (rc < 0) {
+        	    ERROR("could not get context while starting '%s'\n", name_.c_str());
+        	    return false;
+        	}
+    	}
     }
 
     NOTICE("Starting service '%s'...\n", name_.c_str());
@@ -461,7 +463,7 @@ bool Service::Start() {
             }
         }
         if (!seclabel_.empty()) {
-            if (setexeccon(seclabel_.c_str()) < 0) {
+            if (is_selinux_enabled() > 0 && setexeccon(seclabel_.c_str()) < 0) {
                 ERROR("cannot setexeccon('%s'): %s\n",
                       seclabel_.c_str(), strerror(errno));
                 _exit(127);
-- 
2.9.3
From aca3627f9b717a009742e346a231e1425ce63289 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 14:46:48 +0700
Subject: [PATCH 26/29] Revert "init: remove support for disabled SELinux"

This reverts commit d34e407aeb5898f19d4f042b7558420bbb3a1817.

Change-Id: Iba3985d7f3e4ad7f55c6952d515bac7f2b2102dc
---
 init/Android.mk |  4 ++--
 init/init.cpp   | 49 ++++++++++++++++++++++++++++++++++++-------------
 2 files changed, 38 insertions(+), 15 deletions(-)

diff --git a/init/Android.mk b/init/Android.mk
index b05b686..840d5b8 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -5,9 +5,9 @@ LOCAL_PATH:= $(call my-dir)
 # --
 
 ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))
-init_options += -DALLOW_LOCAL_PROP_OVERRIDE=1 -DALLOW_PERMISSIVE_SELINUX=1
+init_options += -DALLOW_LOCAL_PROP_OVERRIDE=1 -DALLOW_DISABLE_SELINUX=1
 else
-init_options += -DALLOW_LOCAL_PROP_OVERRIDE=0 -DALLOW_PERMISSIVE_SELINUX=0
+init_options += -DALLOW_LOCAL_PROP_OVERRIDE=0 -DALLOW_DISABLE_SELINUX=0
 endif
 
 init_options += -DLOG_UEVENTS=0
diff --git a/init/init.cpp b/init/init.cpp
index a738584..0fff5ac 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -447,23 +447,45 @@ static void selinux_init_all_handles(void)
     sehandle_prop = selinux_android_prop_context_handle();
 }
 
-enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
+enum selinux_enforcing_status { SELINUX_DISABLED, SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
 static selinux_enforcing_status selinux_status_from_cmdline() {
     selinux_enforcing_status status = SELINUX_ENFORCING;
 
-    import_kernel_cmdline(false, [&](const std::string& key, const std::string& value, bool in_qemu) {
-        if (key == "androidboot.selinux" && value == "permissive") {
-            status = SELINUX_PERMISSIVE;
+    std::function<void(char*,bool)> fn = [&](char* name, bool in_qemu) {
+        char *value = strchr(name, '=');
+        if (value == nullptr) { return; }
+        *value++ = '\0';
+        if (strcmp(name, "androidboot.selinux") == 0) {
+            if (strcmp(value, "disabled") == 0) {
+                status = SELINUX_DISABLED;
+            } else if (strcmp(value, "permissive") == 0) {
+                status = SELINUX_PERMISSIVE;
+            }
         }
     });
 
     return status;
 }
 
+
+static bool selinux_is_disabled(void)
+{
+    if (ALLOW_DISABLE_SELINUX) {
+        if (access("/sys/fs/selinux", F_OK) != 0) {
+            // SELinux is not compiled into the kernel, or has been disabled
+            // via the kernel command line "selinux=0".
+            return true;
+        }
+        return selinux_status_from_cmdline() == SELINUX_DISABLED;
+    }
+
+    return false;
+}
+
 static bool selinux_is_enforcing(void)
 {
-    if (ALLOW_PERMISSIVE_SELINUX) {
+    if (ALLOW_DISABLE_SELINUX) {
         return selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
     return true;
@@ -471,6 +493,10 @@ static bool selinux_is_enforcing(void)
 
 int selinux_reload_policy(void)
 {
+    if (selinux_is_disabled()) {
+        return -1;
+    }
+
     INFO("SELinux: Attempting to reload policy files\n");
 
     if (selinux_android_reload_policy() == -1) {
@@ -516,6 +542,10 @@ static void selinux_initialize(bool in_kernel_domain) {
     cb.func_audit = audit_callback;
     selinux_set_callback(SELINUX_CB_AUDIT, cb);
 
+    if (selinux_is_disabled()) {
+        return;
+    }
+
     if (in_kernel_domain) {
         INFO("Loading SELinux policy...\n");
         if (selinux_android_load_policy() < 0) {
@@ -523,15 +553,8 @@ static void selinux_initialize(bool in_kernel_domain) {
             security_failure();
         }
 
-        bool kernel_enforcing = (security_getenforce() == 1);
         bool is_enforcing = selinux_is_enforcing();
-        if (kernel_enforcing != is_enforcing) {
-            if (security_setenforce(is_enforcing)) {
-                ERROR("security_setenforce(%s) failed: %s\n",
-                      is_enforcing ? "true" : "false", strerror(errno));
-                security_failure();
-            }
-        }
+        security_setenforce(is_enforcing);
 
         if (write_file("/sys/fs/selinux/checkreqprot", "0") == -1) {
             security_failure();
-- 
2.9.3
From 786214c9c30faea6ce55c71c21fa985b4c33dc86 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Tue, 3 May 2016 23:48:54 +0700
Subject: [PATCH 27/29] 
 0010-system-core_W2-Fix-Reverent-selinux-is-enforcing.pat.patch

Change-Id: I93c0f44a9bd279d06a35547d6fe3c2450793ad80
---
 init/Android.mk |  5 -----
 init/init.cpp   | 10 +---------
 2 files changed, 1 insertion(+), 14 deletions(-)

diff --git a/init/Android.mk b/init/Android.mk
index 840d5b8..4daaac5 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -4,12 +4,7 @@ LOCAL_PATH:= $(call my-dir)
 
 # --
 
-ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))
 init_options += -DALLOW_LOCAL_PROP_OVERRIDE=1 -DALLOW_DISABLE_SELINUX=1
-else
-init_options += -DALLOW_LOCAL_PROP_OVERRIDE=0 -DALLOW_DISABLE_SELINUX=0
-endif
-
 init_options += -DLOG_UEVENTS=0
 
 ifneq ($(TARGET_INIT_COLDBOOT_TIMEOUT),)
diff --git a/init/init.cpp b/init/init.cpp
index 0fff5ac..e64a20c 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -483,14 +483,6 @@ static bool selinux_is_disabled(void)
     return false;
 }
 
-static bool selinux_is_enforcing(void)
-{
-    if (ALLOW_DISABLE_SELINUX) {
-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
-    }
-    return true;
-}
-
 int selinux_reload_policy(void)
 {
     if (selinux_is_disabled()) {
@@ -553,7 +545,7 @@ static void selinux_initialize(bool in_kernel_domain) {
             security_failure();
         }
 
-        bool is_enforcing = selinux_is_enforcing();
+        bool is_enforcing = false;
         security_setenforce(is_enforcing);
 
         if (write_file("/sys/fs/selinux/checkreqprot", "0") == -1) {
-- 
2.9.3



From 96933e1e77e1e6778fc9bf2293555a943968abb3 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Fri, 6 Jan 2017 15:32:02 +0700
Subject: [PATCH 28/29] Revert "init: Don't ignore setsockcreatecon errors"

This reverts commit 83ccb1c76b2b88f62bfba2c58e2edd419b089756.

Change-Id: I7db28b0639bff74f689e6fa69ea06e4a231a3850
---
 init/init.cpp    | 9 ++++++---
 init/service.cpp | 2 +-
 init/util.cpp    | 8 ++------
 3 files changed, 9 insertions(+), 10 deletions(-)

diff --git a/init/init.cpp b/init/init.cpp
index e64a20c..d5b0df6 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -449,6 +449,7 @@ static void selinux_init_all_handles(void)
 
 enum selinux_enforcing_status { SELINUX_DISABLED, SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
+#if 0
 static selinux_enforcing_status selinux_status_from_cmdline() {
     selinux_enforcing_status status = SELINUX_ENFORCING;
 
@@ -467,19 +468,21 @@ static selinux_enforcing_status selinux_status_from_cmdline() {
 
     return status;
 }
-
+#endif
 
 static bool selinux_is_disabled(void)
 {
+    return true;
+#if 0
     if (ALLOW_DISABLE_SELINUX) {
         if (access("/sys/fs/selinux", F_OK) != 0) {
             // SELinux is not compiled into the kernel, or has been disabled
             // via the kernel command line "selinux=0".
             return true;
         }
-        return selinux_status_from_cmdline() == SELINUX_DISABLED;
+        return true /*selinux_status_from_cmdline() == SELINUX_DISABLED */;
     }
-
+#endif
     return false;
 }
 
diff --git a/init/service.cpp b/init/service.cpp
index 18ac14b..5739d83 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -357,8 +357,8 @@ bool Service::Start() {
         return false;
     }
 
+    std::string scon;
     if (is_selinux_enabled() > 0) {
-	    std::string scon;
 	    if (!seclabel_.empty()) {
 	        scon = seclabel_;
 	    } else {
diff --git a/init/util.cpp b/init/util.cpp
index 193b783..1c05434 100755
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -105,12 +105,8 @@ int create_socket(const char *name, int type, mode_t perm, uid_t uid,
     int fd, ret, savederrno;
     char *filecon;
 
-    if (socketcon) {
-        if (setsockcreatecon(socketcon) == -1) {
-            ERROR("setsockcreatecon(\"%s\") failed: %s\n", socketcon, strerror(errno));
-            return -1;
-        }
-    }
+    if (socketcon)
+        setsockcreatecon(socketcon);
 
     fd = socket(PF_UNIX, type, 0);
     if (fd < 0) {
-- 
2.9.3

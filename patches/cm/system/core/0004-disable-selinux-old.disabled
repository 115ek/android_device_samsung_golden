diff --git a/init/Android.mk b/init/Android.mk
index 0f5fe1c..0189ecd 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -4,12 +4,7 @@ LOCAL_PATH:= $(call my-dir)
 
 # --
 
-ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))
 init_options += -DALLOW_LOCAL_PROP_OVERRIDE=1 -DALLOW_PERMISSIVE_SELINUX=1
-else
-init_options += -DALLOW_LOCAL_PROP_OVERRIDE=0 -DALLOW_PERMISSIVE_SELINUX=0
-endif
-
 init_options += -DLOG_UEVENTS=0
 
 ifneq ($(TARGET_INIT_COLDBOOT_TIMEOUT),)
diff --git a/init/init.cpp b/init/init.cpp
old mode 100755
new mode 100644
index 9992b47..03effa9
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -426,18 +427,18 @@ static int queue_property_triggers_action(const std::vector<std::string>& args)
     property_triggers_enabled = 1;
     return 0;
 }
-
+/*
 static void selinux_init_all_handles(void)
 {
     sehandle = selinux_android_file_context_handle();
     selinux_android_set_sehandle(sehandle);
     sehandle_prop = selinux_android_prop_context_handle();
 }
-
+*/
 enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
-
+/*
 static selinux_enforcing_status selinux_status_from_cmdline() {
-    selinux_enforcing_status status = SELINUX_ENFORCING;
+    selinux_enforcing_status status = SELINUX_PERMISSIVE;
 
     import_kernel_cmdline(false, [&](const std::string& key, const std::string& value, bool in_qemu) {
         if (key == "androidboot.selinux" && value == "permissive") {
@@ -447,17 +448,22 @@ static selinux_enforcing_status selinux_status_from_cmdline() {
 
     return status;
 }
+*/
 
+/*
 static bool selinux_is_enforcing(void)
 {
+    return false;
     if (ALLOW_PERMISSIVE_SELINUX) {
         return selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
     return true;
-}
+}*/
 
 int selinux_reload_policy(void)
 {
+    return -1;
+/*
     INFO("SELinux: Attempting to reload policy files\n");
 
     if (selinux_android_reload_policy() == -1) {
@@ -472,6 +478,7 @@ int selinux_reload_policy(void)
 
     selinux_init_all_handles();
     return 0;
+*/
 }
 
 static int audit_callback(void *data, security_class_t /*cls*/, char *buf, size_t len) {
@@ -490,8 +497,8 @@ static int audit_callback(void *data, security_class_t /*cls*/, char *buf, size_
 
 static void security_failure() {
     ERROR("Security failure; rebooting into recovery mode...\n");
-    android_reboot(ANDROID_RB_RESTART2, 0, "recovery");
-    while (true) { pause(); }  // never reached
+    //android_reboot(ANDROID_RB_RESTART2, 0, "recovery");
+    //while (true) { pause(); }  // never reached
 }
 
 static void selinux_initialize(bool in_kernel_domain) {
@@ -502,7 +509,8 @@ static void selinux_initialize(bool in_kernel_domain) {
     selinux_set_callback(SELINUX_CB_LOG, cb);
     cb.func_audit = audit_callback;
     selinux_set_callback(SELINUX_CB_AUDIT, cb);
-
+    return;
+    /*
     if (in_kernel_domain) {
         INFO("Loading SELinux policy...\n");
         if (selinux_android_load_policy() < 0) {
@@ -529,6 +537,7 @@ static void selinux_initialize(bool in_kernel_domain) {
     } else {
         selinux_init_all_handles();
     }
+*/
 }
 
 static int charging_mode_booting(void) {
diff --git a/init/property_service.cpp b/init/property_service.cpp
index 8644329..2439bd9 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -67,7 +67,7 @@ static int property_set_fd = -1;
 void property_init() {
     if (__system_property_area_init()) {
         ERROR("Failed to initialize property area\n");
-        exit(1);
+        //exit(1);
     }
 }
 
@@ -322,15 +322,17 @@ static void handle_property_set_fd()
             if (check_control_mac_perms(msg.value, source_ctx, &cr)) {
                 handle_control_message((char*) msg.name + 4, (char*) msg.value);
             } else {
-                ERROR("sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n",
-                        msg.name + 4, msg.value, cr.uid, cr.gid, cr.pid);
+                //ERROR("sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n",
+                //        msg.name + 4, msg.value, cr.uid, cr.gid, cr.pid);
+                handle_control_message((char*) msg.name + 4, (char*) msg.value);
             }
         } else {
             if (check_mac_perms(msg.name, source_ctx, &cr)) {
                 property_set((char*) msg.name, (char*) msg.value);
             } else {
-                ERROR("sys_prop: permission denied uid:%d  name:%s\n",
-                      cr.uid, msg.name);
+                //ERROR("sys_prop: permission denied uid:%d  name:%s\n",
+                //      cr.uid, msg.name);
+                property_set((char*) msg.name, (char*) msg.value);
             }
 
             // Note: bionic's property client code assumes that the
@@ -561,7 +563,7 @@ void start_property_service() {
                                     0666, 0, 0, NULL);
     if (property_set_fd == -1) {
         ERROR("start_property_service socket creation failed: %s\n", strerror(errno));
-        exit(1);
+        //exit(1);
     }
 
     listen(property_set_fd, 8);
diff --git a/init/service.cpp b/init/service.cpp
index 76e0bc8..c88fe57 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -354,14 +354,14 @@ bool Service::Start() {
         int rc = getcon(&mycon);
         if (rc < 0) {
             ERROR("could not get context while starting '%s'\n", name_.c_str());
-            return false;
+            //return false;
         }
 
         rc = getfilecon(args_[0].c_str(), &fcon);
         if (rc < 0) {
             ERROR("could not get context while starting '%s'\n", name_.c_str());
             free(mycon);
-            return false;
+            //return false;
         }
 
         char* ret_scon = nullptr;
@@ -371,17 +371,11 @@ bool Service::Start() {
             scon = ret_scon;
             free(ret_scon);
         }
-        if (rc == 0 && scon == mycon) {
-            ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
-            free(mycon);
-            free(fcon);
-            return false;
-        }
         free(mycon);
         free(fcon);
         if (rc < 0) {
             ERROR("could not get context while starting '%s'\n", name_.c_str());
-            return false;
+            //return false;
         }
     }
 

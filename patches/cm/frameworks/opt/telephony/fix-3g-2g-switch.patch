diff --git a/src/java/com/android/internal/telephony/PhoneBase.java b/src/java/com/android/internal/telephony/PhoneBase.java
index 3a38f96..59a20a9 100644
--- a/src/java/com/android/internal/telephony/PhoneBase.java
+++ b/src/java/com/android/internal/telephony/PhoneBase.java
@@ -1562,23 +1562,33 @@ public abstract class PhoneBase extends Handler implements Phone {
         // Only set preferred network types to that which the modem supports
         int modemRaf = getRadioAccessFamily();
         int rafFromType = RadioAccessFamily.getRafFromNetworkType(networkType);
-
-        if (modemRaf == RadioAccessFamily.RAF_UNKNOWN
-                || rafFromType == RadioAccessFamily.RAF_UNKNOWN) {
-            Rlog.d(LOG_TAG, "setPreferredNetworkType: Abort, unknown RAF: "
-                    + modemRaf + " " + rafFromType);
-            if (response != null) {
-                CommandException ex;
-
-                ex = new CommandException(CommandException.Error.GENERIC_FAILURE);
-                AsyncResult.forMessage(response, null, ex);
-                response.sendToTarget();
-            }
-            return;
-        }
-
-        int filteredRaf = (rafFromType & modemRaf);
-        int filteredType = RadioAccessFamily.getNetworkTypeFromRaf(filteredRaf);
+       int filteredType = 0;
+
+       switch (rafFromType) {
+       case 101902:
+               filteredType = RILConstants.NETWORK_MODE_WCDMA_PREF;
+               break;
+       case 65542:
+               filteredType = RILConstants.NETWORK_MODE_GSM_ONLY;
+               break;
+       case 36360:
+               filteredType = RILConstants.NETWORK_MODE_WCDMA_ONLY;
+               break;
+       default:
+               if ((modemRaf == RadioAccessFamily.RAF_UNKNOWN
+                       || rafFromType == RadioAccessFamily.RAF_UNKNOWN)) {
+                       Rlog.d(LOG_TAG, "setPreferredNetworkType: Abort, unknown RAF: "
+                       + modemRaf + " " + rafFromType);
+                       if (response != null) {
+                           CommandException ex;
+
+                               ex = new CommandException(CommandException.Error.GENERIC_FAILURE);
+                               AsyncResult.forMessage(response, null, ex);
+                               response.sendToTarget();
+                       }
+                       return;
+               }
+       }

         Rlog.d(LOG_TAG, "setPreferredNetworkType: networkType = " + networkType
                 + " modemRaf = " + modemRaf

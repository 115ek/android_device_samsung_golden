From 4b2c7d0620498d509a9e24692d84e7c2fb6fb3c7 Mon Sep 17 00:00:00 2001
From: Roman Birg <roman@cyngn.com>
Date: Wed, 4 May 2016 09:41:51 -0700
Subject: [PATCH] RemoteController: extract interface conflicting with CTS test
 (1/2)

android.media.cts.RemoteControllerTest#testOnClientUpdateListenerUnchanged
will fail because it expects no extra methods to be added to the
listeners and the current AVRCP impl simply appended methods to that
listener. In 13 this was fixed by creating a separate listener for those
callbacks. Backport that listener to fix the test.

Ticket: HAM-1300, CYNGNOS-2716

Change-Id: I05bdac4fcc581c09e03fe7feb216d012a4c5e62b
Signed-off-by: Roman Birg <roman@cyngn.com>
---
 media/java/android/media/RemoteController.java     | 94 +++++++++++++---------
 .../keyguard/KeyguardTransportControlView.java     | 12 ---
 2 files changed, 55 insertions(+), 51 deletions(-)

diff --git a/media/java/android/media/RemoteController.java b/media/java/android/media/RemoteController.java
index a4b445a..06d53d0 100644
--- a/media/java/android/media/RemoteController.java
+++ b/media/java/android/media/RemoteController.java
@@ -88,6 +88,7 @@
     private boolean mIsRegistered = false;
     private PendingIntent mClientPendingIntentCurrent;
     private OnClientUpdateListener mOnClientUpdateListener;
+    private OnClientAvrcpUpdateListener mOnClientAvrcpUpdateListener;
     private PlaybackInfo mLastPlaybackInfo;
     private int mArtworkWidth = -1;
     private int mArtworkHeight = -1;
@@ -150,12 +151,31 @@ public RemoteController(Context context, OnClientUpdateListener updateListener,
         }
     }
 
+    /**
+     * @hide
+     */
+    public RemoteController(Context context, OnClientUpdateListener updateListener, Looper looper,
+            OnClientAvrcpUpdateListener avrcpUpdateListener) throws IllegalArgumentException {
+        this(context, updateListener, looper);
+        mOnClientAvrcpUpdateListener = avrcpUpdateListener;
+    }
 
     /**
-     * Interface definition for the callbacks to be invoked whenever media events, metadata
-     * and playback status are available.
+     * @hide
      */
+    public interface OnClientAvrcpUpdateListener {
+        public void onClientFolderInfoBrowsedPlayer(String stringUri);
+        public void onClientUpdateNowPlayingEntries(long[] playList);
+        public void onClientNowPlayingContentChange();
+        public void onClientPlayItemResponse(boolean success);
+    };
+
+    /**
+    * Interface definition for the callbacks to be invoked whenever media events, metadata
+    * and playback status are available.
+    */
     public interface OnClientUpdateListener {
+
         /**
          * Called whenever all information, previously received through the other
          * methods of the listener, is no longer valid and is about to be refreshed.
@@ -165,7 +185,6 @@ public RemoteController(Context context, OnClientUpdateListener updateListener,
          *     is available.
          */
         public void onClientChange(boolean clearing);
-
         /**
          * Called whenever the playback state has changed.
          * It is called when no information is known about the playback progress in the media and
@@ -206,26 +225,6 @@ public void onClientPlaybackStateUpdate(int state, long stateChangeTimeMs,
          */
         public void onClientMetadataUpdate(MetadataEditor metadataEditor);
 
-        /**
-         * @hide
-         */
-        public void onClientFolderInfoBrowsedPlayer(String stringUri);
-
-        /**
-         * @hide
-         */
-        public void onClientUpdateNowPlayingEntries(long[] playList);
-
-        /**
-         * @hide
-         */
-        public void onClientNowPlayingContentChange();
-
-        /**
-         * @hide
-         */
-        public void onClientPlayItemResponse(boolean success);
-
     };
 
 
@@ -1176,14 +1175,18 @@ private void onNewMediaMetadata(MediaMetadata metadata) {
      */
     public void onFolderInfoBrowsedPlayer(String stringUri) {
         Log.d(TAG, "RemoteController: onFolderInfoBrowsedPlayer");
-        final OnClientUpdateListener l;
+        final OnClientAvrcpUpdateListener l;
 
         synchronized(mInfoLock) {
-            l = mOnClientUpdateListener;
+            l = mOnClientAvrcpUpdateListener;
         }
 
-        if (l != null) {
-            l.onClientFolderInfoBrowsedPlayer(stringUri);
+        try {
+            if (l != null) {
+                l.onClientFolderInfoBrowsedPlayer(stringUri);
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error Updating AVRCP on receiving Browsed player response", e);
         }
     }
 
@@ -1192,13 +1195,18 @@ public void onFolderInfoBrowsedPlayer(String stringUri) {
      */
     public void onNowPlayingEntriesUpdate(long[] playList) {
         Log.d(TAG, "RemoteController: onUpdateNowPlayingEntries");
-        final OnClientUpdateListener l;
+        final OnClientAvrcpUpdateListener l;
 
         synchronized(mInfoLock) {
-            l = mOnClientUpdateListener;
+            l = mOnClientAvrcpUpdateListener;
         }
-        if (l != null) {
-            l.onClientUpdateNowPlayingEntries(playList);
+
+        try {
+            if (l != null) {
+                l.onClientUpdateNowPlayingEntries(playList);
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error Updating AVRCP on receiving Now Playing Entries", e);
         }
     }
 
@@ -1207,14 +1215,18 @@ public void onNowPlayingEntriesUpdate(long[] playList) {
      */
     public void onNowPlayingContentChange() {
         Log.d(TAG, "RemoteController: onNowPlayingContentChange");
-        final OnClientUpdateListener l;
+        final OnClientAvrcpUpdateListener l;
 
         synchronized(mInfoLock) {
-            l = mOnClientUpdateListener;
+            l = mOnClientAvrcpUpdateListener;
         }
 
-        if (l != null) {
-            l.onClientNowPlayingContentChange();
+        try {
+            if (l != null) {
+                l.onClientNowPlayingContentChange();
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error Updating AVRCP on Now Playing Content Change", e);
         }
     }
 
@@ -1223,14 +1235,18 @@ public void onNowPlayingContentChange() {
      */
     public void onSetPlayItemResponse(boolean success) {
         Log.d(TAG, "RemoteController: onPlayItemResponse");
-        final OnClientUpdateListener l;
+        final OnClientAvrcpUpdateListener l;
 
         synchronized(mInfoLock) {
-            l = mOnClientUpdateListener;
+            l = mOnClientAvrcpUpdateListener;
         }
 
-        if (l != null) {
-            l.onClientPlayItemResponse(success);
+        try {
+            if (l != null) {
+                l.onClientPlayItemResponse(success);
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error Updating AVRCP on receiving Play Item response", e);
         }
     }
 
diff --git a/packages/Keyguard/src/com/android/keyguard/KeyguardTransportControlView.java b/packages/Keyguard/src/com/android/keyguard/KeyguardTransportControlView.java
index 900928a..0d472ae 100644
--- a/packages/Keyguard/src/com/android/keyguard/KeyguardTransportControlView.java
+++ b/packages/Keyguard/src/com/android/keyguard/KeyguardTransportControlView.java
@@ -138,18 +138,6 @@ public void onClientTransportControlUpdate(int transportControlFlags) {
         public void onClientMetadataUpdate(RemoteController.MetadataEditor metadataEditor) {
             updateMetadata(metadataEditor);
         }
-
-        @Override
-        public void onClientFolderInfoBrowsedPlayer(String stringUri) { }
-
-        @Override
-        public void onClientUpdateNowPlayingEntries(long[] playList) { }
-
-        @Override
-        public void onClientNowPlayingContentChange() { }
-
-        @Override
-        public void onClientPlayItemResponse(boolean success) { }
     };
 
     private class UpdateSeekBarRunnable implements  Runnable {

diff --git a/Android.mk b/Android.mk
index 8fb2334..ba20881 100644
--- a/Android.mk
+++ b/Android.mk
@@ -96,6 +96,10 @@ ifeq ($(TARGET_KERNEL_HAVE_NTFS),true)
 vold_cflags += -DCONFIG_KERNEL_HAVE_NTFS
 endif
 
+ifeq ($(BOARD_REQUIRES_FORCE_VPARTITION),true)
+vold_cflags += -DCONFIG_FORCE_VPARTITION
+endif
+
 include $(CLEAR_VARS)
 
 LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
diff --git a/Disk.cpp b/Disk.cpp
index f52287d..b1b9de3 100644
--- a/Disk.cpp
+++ b/Disk.cpp
@@ -105,8 +105,12 @@ static bool isVirtioBlkDevice(unsigned int major) {
      * "ranchu", the device's sysfs path should end with "/block/vd[d-z]", etc.
      * But just having a) and b) is enough for now.
      */
+#ifdef CONFIG_FORCE_VPARTITION
+    return true;
+#else
     return IsRunningInEmulator() && major >= kMajorBlockExperimentalMin
             && major <= kMajorBlockExperimentalMax;
+#endif
 }
 
 Disk::Disk(const std::string& eventPath, dev_t device,
diff --git a/Loop.cpp b/Loop.cpp
index a5863b3..a12be1b 100644
--- a/Loop.cpp
+++ b/Loop.cpp
@@ -146,28 +146,14 @@ int Loop::create(const char *id, const char *loopFile, char *loopDeviceBuffer, s
         mode_t mode = 0660 | S_IFBLK;
         unsigned int dev = (0xff & i) | ((i << 12) & 0xfff00000) | (7 << 8);
 
-        if (sehandle) {
-            rc = selabel_lookup(sehandle, &secontext, filename, S_IFBLK);
-            if (rc == 0)
-                setfscreatecon(secontext);
-        }
-
         if (mknod(filename, mode, dev) < 0) {
             if (errno != EEXIST) {
                 int sverrno = errno;
                 SLOGE("Error creating loop device node (%s)", strerror(errno));
-                if (secontext) {
-                    freecon(secontext);
-                    setfscreatecon(NULL);
-                }
                 errno = sverrno;
                 return -1;
             }
         }
-        if (secontext) {
-            freecon(secontext);
-            setfscreatecon(NULL);
-        }
 
         if ((fd = open(filename, O_RDWR | O_CLOEXEC)) < 0) {
             SLOGE("Unable to open %s (%s)", filename, strerror(errno));
diff --git a/PublicVolume.cpp b/PublicVolume.cpp
index 96698ab..8faf00d 100644
--- a/PublicVolume.cpp
+++ b/PublicVolume.cpp
@@ -113,9 +113,11 @@ status_t PublicVolume::doMount() {
         return -EIO;
     }
 
-    // Use UUID as stable name, if available
+    // Use volume label and otherwise UUID as stable name, if available
     std::string stableName = getId();
-    if (!mFsUuid.empty()) {
+    if (!mFsLabel.empty()) {
+        stableName = mFsLabel;
+    } else if (!mFsUuid.empty()) {
         stableName = mFsUuid;
     }
 
@@ -209,27 +211,16 @@ status_t PublicVolume::doMount() {
     dev_t before = GetDevice(mFuseWrite);
 
     if (!(mFusePid = fork())) {
-        if (getMountFlags() & MountFlags::kPrimary) {
-            if (execl(kFusePath, kFusePath,
-                    "-u", "1023", // AID_MEDIA_RW
-                    "-g", "1023", // AID_MEDIA_RW
-                    "-U", std::to_string(getMountUserId()).c_str(),
-                    "-w",
-                    mRawPath.c_str(),
-                    stableName.c_str(),
-                    NULL)) {
-                PLOG(ERROR) << "Failed to exec";
-            }
-        } else {
-            if (execl(kFusePath, kFusePath,
-                    "-u", "1023", // AID_MEDIA_RW
-                    "-g", "1023", // AID_MEDIA_RW
-                    "-U", std::to_string(getMountUserId()).c_str(),
-                    mRawPath.c_str(),
-                    stableName.c_str(),
-                    NULL)) {
-                PLOG(ERROR) << "Failed to exec";
-            }
+        if (execl(kFusePath, kFusePath,
+                  "-u", "1023", // AID_MEDIA_RW
+                  "-g", "1023", // AID_MEDIA_RW
+                  "-U", std::to_string(getMountUserId()).c_str(),
+                  "-m",
+                  "-w",
+                  mRawPath.c_str(),
+                  stableName.c_str(),
+                  NULL)) {
+            PLOG(ERROR) << "Failed to exec";
         }
 
         LOG(ERROR) << "FUSE exiting";
diff --git a/Utils.cpp b/Utils.cpp
index cc66101..32eeb93 100644
--- a/Utils.cpp
+++ b/Utils.cpp
@@ -69,11 +69,6 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
     status_t res = 0;
 
     char* secontext = nullptr;
-    if (sehandle) {
-        if (!selabel_lookup(sehandle, &secontext, cpath, S_IFBLK)) {
-            setfscreatecon(secontext);
-        }
-    }
 
     mode_t mode = 0660 | S_IFBLK;
     if (mknod(cpath, mode, dev) < 0) {
@@ -84,11 +79,6 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
         }
     }
 
-    if (secontext) {
-        setfscreatecon(nullptr);
-        freecon(secontext);
-    }
-
     return res;
 }
 
@@ -105,19 +95,9 @@ status_t PrepareDir(const std::string& path, mode_t mode, uid_t uid, gid_t gid)
     const char* cpath = path.c_str();
 
     char* secontext = nullptr;
-    if (sehandle) {
-        if (!selabel_lookup(sehandle, &secontext, cpath, S_IFDIR)) {
-            setfscreatecon(secontext);
-        }
-    }
 
     int res = fs_prepare_dir(cpath, mode, uid, gid);
 
-    if (secontext) {
-        setfscreatecon(nullptr);
-        freecon(secontext);
-    }
-
     if (res == 0) {
         return OK;
     } else {
@@ -282,15 +262,7 @@ status_t ForkExecvp(const std::vector<std::string>& args, security_context_t con
         }
     }
 
-    if (setexeccon(context)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
     status_t res = android_fork_execvp(argc, argv, NULL, false, true);
-    if (setexeccon(nullptr)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
 
     free(argv);
     return res;
@@ -314,15 +286,7 @@ status_t ForkExecvp(const std::vector<std::string>& args,
     }
     output.clear();
 
-    if (setexeccon(context)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
     FILE* fp = popen(cmd.c_str(), "r");
-    if (setexeccon(nullptr)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
 
     if (!fp) {
         PLOG(ERROR) << "Failed to popen " << cmd;
diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index 6c4771c..e06e887 100644
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -677,11 +677,6 @@ int VolumeManager::unmountAll() {
     }
     endmntent(fp);
 
-    for (auto path : toUnmount) {
-        SLOGW("Tearing down stale mount %s", path.c_str());
-        android::vold::ForceUnmount(path);
-    }
-
     return 0;
 }
 
diff --git a/main.cpp b/main.cpp
index 6852687..434cba9 100644
--- a/main.cpp
+++ b/main.cpp
@@ -77,11 +77,6 @@ extern "C" int vold_main(int argc, char** argv) {
 
     parse_args(argc, argv);
 
-    sehandle = selinux_android_file_context_handle();
-    if (sehandle) {
-        selinux_android_set_sehandle(sehandle);
-    }
-
     // Quickly throw a CLOEXEC on the socket we just inherited from init
     fcntl(android_get_control_socket("vold"), F_SETFD, FD_CLOEXEC);
     fcntl(android_get_control_socket("cryptd"), F_SETFD, FD_CLOEXEC);
